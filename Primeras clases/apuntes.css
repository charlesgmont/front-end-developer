/* 
clase1: Internet: Interconnected y Network
Red de computadoras conectadas en todo el mundo.

Tim Berners-Lee Invento World Wide Web.
Fundo el consorcio W3C para estandarizar el desarrollo de las tecnolog칤as base Internet

HTTP Hyper Text Transfer Protocol 游땟/ (Permite la comunicaci칩n de datos entre dispositivos)
URL Uniform Resource Locator: (Direcci칩n de un sitio web)
HTML Hyper Text Markup Language (Lenguaje para describir la estructura de una sitio web)
En 1994 apareci칩 CSS Cascade Style Sheets.

DOM
Document object model
El navegador transforma las etiquetas en objetos que son entendibles para el navegador.

CSSOM
Este mismo agarra el c칩digo de css y lo transforma en un lenguaje entendible para el navegador

RENDER TREE
Este mismo es un 치rbol en el que el DOM y el CSSOM juntos para renderizar el proceso que creamos en el codigo.

Como el navegador lee el c칩digo
1- El navegador transforma el c칩digo en bytes
2- teniendo el c칩digo en bytes este los transforma en caracteres y este se da cuenta leyendo el meta charset
3- Tokens, este los transforma en elementos html y los ordena
4- Transforma estos en Nodos y estos son los que entiende el.
y clasifica los objetos y los contenidos
5- El dom es el 치rbol de los elementos que se forma con todos estos pasos.

HTML

Anatom칤a de un elemento HTML: Atributos, anidamiento y elementos vac칤os.

T칤tulos: H1, H2, H3, H4, H5 y H6
Todos los elementos de HTML tienen una etiqueta de apertura y otra de clausura que tiene un slash, que justamente
indica su cierre. Atributos se componen del nombre del atributo, un s칤mbolo = y el valor del atributo. Siempre van 
adentro de la etiqueta de apertura.
Anidamiento
Se entiende el anidamiento a base de la identaci칩n de los elementos. Existen elementos que existen por definici칩n 
dentro de otros elementos, como por ejemplo ul que contiene elementos li. Una correcta anidaci칩n ser치 clave para un 
renderizado correcto de nuestra p치gina web. Un elemento mal anidado podr칤a tener como consecuencia que el componente 
no se renderice por el render tree.
Elementos vac칤os
Img que lleva como atributos src y alt
El atributo alt ser치 utilizado por lectores de pantalla para describir a los usuarios la imagen que deber칤an de ver si
pudiesen ver. Este es un atributo que debe usarse si queremos hacer de nuestro sitio un sitio amigable con la diversidad.

Errores sint치cticos: Son errores de escritura en el c칩digo y evitan que el programa funcione. Pueden ser errores de tipado.

Errores l칩gicos: En estos la sintaxis es correcta, pero el c칩digo no hace lo que deber칤a. El programa funciona, pero de forma incorrecta.

Anatomia CSS
Nuestros estilos con CSS se componen de:

Selector: son la referencia a los elementos HTML que queremos estilizar. Los nombres de estas etiquetas van seguidas 
de una llave de apertura y otra de cierre ({}). Por ejemplo: h1 {}.
Propiedades: son el tipo de estilo que queremos darle a nuestros elementos. Van seguidas de dos puntos (:). 
Las propiedades deben estar dentro de las llaves del selector que definimos anteriormente. Podemos escribir diferentes 
propiedades en un mismo selector. Por ejemplo: h1 { color: }.
Valores: son el estilo que queremos que tomen nuestros elementos HTML con respecto a una propiedad. 
Van seguidas de un punto y coma (;). Por ejemplo: h1 { color: red; }.
h1 {
  color: red;
}

Tipos de selectores
*(asterisco): Es el selector universal. Las propiedades se aplicaran a todos los elementos de nuestro HTML.

Tipo: Son selectores que se aplican a cierto elemento HTML en espec칤fico. Las propiedades se aplicaran a la etiqueta que queremos, por ejemplo p, body, html, div, etc.

Clase: Si nuestras etiqueta de HTML tienen un atributo de class podemos usar ese valor o identificador para que los cambios en el CSS afecten 칰nicamente a ese elemento.

ID: Es similar al anterior, si la etiqueta HTML tiene un ID podemos afectar solo ese elemento.

Las Pseudo-clases y Pseudo-elementos nos permiten ser a칰n m치s espec칤ficos con qu칠 elemento o partes de nuestros elementos deben recibir los estilos.

Para usarlas debemos definir el selector base (por ejemplo, p) seguido de dos puntos y la pseudo-clase que queremos estilizar (por ejemplo: p:first-child). En el caso de los pseudo-elementos debemos usar el dos puntos 2 veces (p::first-letter).

 Asterisco (universal) 
* {
    margin: 0;
  }
  
  /* Tipo 
  h1 {
    color: red;
  }
  
  /* Clase 
  .saludo {
    font-size: 2em;
  }
  
  /* ID 
  #id {
    border-radius: 20px;
  }
  
  /* Pseudo-clases 
  p:first-child {
    color: white;
  }
  
  p:last-child {
    color: purple;
  }
  
  p:nth-child(2n) {
    color: red;
  } *\